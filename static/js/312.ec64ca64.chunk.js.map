{"version":3,"file":"static/js/312.ec64ca64.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Contact/Contact.styled.js","components/Contact/Contact.js","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","../node_modules/nanoid/index.browser.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.contactsFilter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nexport const InputForm = styled.input`\n  max-width: 280px;\n  width: 100%;\n\n  margin-left: auto;\n  margin-right: auto;\n\n  height: 40px;\n\n  border-radius: 5px;\n  border: none;\n`;\n\nexport const FormGroup = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const SubmitButton = styled.button`\n  max-width: 220px;\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  color: #fff;\n\n  padding: 10px;\n  border-radius: 20px;\n  border: none;\n  background-color: #729d68;\n\n  transform: scale(1);\n  transition: transform 250ms ease-in-out;\n\n  margin-bottom: 30px;\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.2);\n    transition: transform 250ms ease-in-out;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Form, InputForm, SubmitButton } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.target;\n    const { name, number } = form.elements;\n\n    if (\n      contacts.find(\n        item =>\n          item.name.toLowerCase().trim() === name.value.toLowerCase().trim()\n      )\n    ) {\n      alert(`${name.value} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name: name.value, number: number.value }));\n    form.reset();\n  };\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmit}>\n        <InputForm type=\"text\" name=\"name\" placeholder=\"Enter name\" />\n        <InputForm type=\"tel\" name=\"number\" placeholder=\"Enter phone number\" />\n        <SubmitButton type=\"submit\">Add Contact</SubmitButton>\n      </Form>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n\n  text-align: center;\n\n  border: 1px solid black;\n\n  padding: 10px 20px;\n\n  border-radius: 10px;\n\n  max-width: 320px;\n  width: 100%;\n\n  margin-left: auto;\n  margin-right: auto;\n\n  background-color: white;\n`;\n\nexport const ContactItemContainer = styled.div`\n  width: 220px;\n`;\n\nexport const DeleteButton = styled.button`\n  max-width: 208px;\n\n  color: #fff;\n\n  border-radius: 10px;\n\n  padding: 5px 10px;\n  border: none;\n  background-color: #c64b41;\n\n  transform: scale(1);\n  transition: transform 250ms ease-in-out;\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.2);\n    transition: transform 250ms ease-in-out;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport {\n  ContactItem,\n  ContactItemContainer,\n  DeleteButton,\n} from './Contact.styled';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ data: { name, number, id } }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContactItem key={id}>\n      <ContactItemContainer>\n        {name} <br /> {number}\n      </ContactItemContainer>\n      <DeleteButton onClick={handleDelete}>Delete</DeleteButton>\n    </ContactItem>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListWithContacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { Contact } from 'components/Contact/Contact';\nimport { ListWithContacts } from './ContactsList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ListWithContacts>\n      {visibleContacts.map(contact => (\n        <Contact data={contact} key={contact.id} />\n      ))}\n    </ListWithContacts>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  margin-bottom: 15px;\n`;\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 5px;\n`;\n","import { nanoid } from 'nanoid';\n\nimport { FilterContainer, FilterLabel, FilterInput } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { contactsFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filterInput = nanoid();\n  const dispatch = useDispatch();\n\n  const handleFilterChange = filter => {\n    return dispatch(contactsFilter(filter));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel htmlFor={filterInput}>\n        Find contacts by name:\n        <FilterInput\n          type=\"text\"\n          id={filterInput}\n          onChange={event => handleFilterChange(event.target.value)}\n        ></FilterInput>\n      </FilterLabel>\n    </FilterContainer>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsListTitle, PhonebookTitle } from 'components/App/GlobalStyle';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <PhonebookTitle>Your Phonebook</PhonebookTitle>\n      <ContactForm />\n      <ContactsListTitle>Contacts</ContactsListTitle>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","contactsFilter","contact","name","toLowerCase","includes","Form","styled","_templateObject","_taggedTemplateLiteral","InputForm","_templateObject2","SubmitButton","_templateObject3","_templateObject4","ContactForm","dispatch","useDispatch","useSelector","_jsx","children","_jsxs","onSubmit","event","preventDefault","form","target","_form$elements","elements","number","find","item","trim","value","alert","concat","addContact","reset","type","placeholder","ContactItem","ContactItemContainer","DeleteButton","Contact","_ref","_ref$data","data","id","onClick","deleteContact","ListWithContacts","ContactsList","visibleContacts","map","FilterContainer","FilterLabel","FilterInput","Filter","filterInput","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor","onChange","Contacts","useEffect","fetchContacts","_Fragment","Helmet","PhonebookTitle","ContactsListTitle"],"sourceRoot":""}